services:
  # =============================================================================
  # NOTIFICATIONS DATABASE: PostgreSQL (ISOLATED)
  # =============================================================================
  notifications-postgres:
    image: postgres:15-alpine
    container_name: notifications-postgres-isolated
    environment:
      POSTGRES_DB: notifications_db
      POSTGRES_USER: notifications_user
      POSTGRES_PASSWORD: notifications_password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5433:5432"  # Different port to avoid conflicts
    volumes:
      - notifications_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U notifications_user -d notifications_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # =============================================================================
  # FN-Notifications Application - With Isolated Database
  # =============================================================================
  notifications-app:
    build:
      context: .
      dockerfile: Dockerfile.dev
    ports:
      - "4000:4000"
    environment:
      # Environment Configuration
      ENVIRONMENT: "${ENVIRONMENT:-development}"

      # Isolated Database (PostgreSQL for Notifications Service)
      DATABASE_URL: "${DATABASE_URL:-postgresql://notifications_user:notifications_password@notifications-postgres:5432/notifications_db}"

      # Database Connection Pool Settings
      DB_HOST: "${DB_HOST:-notifications-postgres}"
      DB_PORT: "${DB_PORT:-5432}"
      DB_NAME: "${DB_NAME:-notifications_db}"
      DB_USER: "${DB_USER:-notifications_user}"
      DB_PASSWORD: "${DB_PASSWORD:-notifications_password}"
      POOL_SIZE: "${POOL_SIZE:-10}"

      # Cloud Event Streaming (Confluent Cloud)
      KAFKA_BOOTSTRAP_SERVERS: "${KAFKA_BOOTSTRAP_SERVERS}"
      KAFKA_API_KEY: "${KAFKA_API_KEY}"
      KAFKA_API_SECRET: "${KAFKA_API_SECRET}"
      KAFKA_CONSUMER_GROUP: "${KAFKA_CONSUMER_GROUP:-fn-notifications-cloud}"

      # Cloud Storage
      BUCKET_URL: "${BUCKET_URL:-}"
      BUCKET_NAME: "${BUCKET_NAME:-}"
      STORAGE_PROJECT_ID: "${STORAGE_PROJECT_ID:-}"
      STORAGE_SERVICE_ACCOUNT_JSON: "${STORAGE_SERVICE_ACCOUNT_JSON:-}"

      # Application Configuration
      SECRET_KEY_BASE: "${SECRET_KEY_BASE:-your-secret-key-base-here-change-in-production}"
      PHX_HOST: "${PHX_HOST:-localhost}"
      WEB_BASE_URL: "${WEB_BASE_URL:-http://localhost:4000}"
      SENDER_EMAIL: "${SENDER_EMAIL:-notifications@fnnotifications.local}"

      # Notification Mode Configuration
      TEST_MODE: "${TEST_MODE:-false}"
      LOG_TWILIO_REQUESTS: "${LOG_TWILIO_REQUESTS:-true}"

      # External Services (Twilio)
      TWILIO_ACCOUNT_SID: "${TWILIO_ACCOUNT_SID:-}"
      TWILIO_AUTH_TOKEN: "${TWILIO_AUTH_TOKEN:-}"
      TWILIO_PHONE_NUMBER: "${TWILIO_PHONE_NUMBER:-+1234567890}"
      TWILIO_WHATSAPP_NUMBER: "${TWILIO_WHATSAPP_NUMBER:-whatsapp:+14155238886}"

      # Email SMTP Configuration
      SMTP_HOST: "${SMTP_HOST:-smtp.gmail.com}"
      SMTP_PORT: "${SMTP_PORT:-587}"
      SMTP_USERNAME: "${SMTP_USERNAME:-}"
      SMTP_PASSWORD: "${SMTP_PASSWORD:-}"
    depends_on:
      notifications-postgres:
        condition: service_healthy
    volumes:
      - .:/app:cached
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  notifications_postgres_data:
    name: fn-notifications-postgres-data